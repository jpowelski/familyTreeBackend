plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.5' // Użyj najnowszej stabilnej wersji Spring Boot 3.x
    id 'io.spring.dependency-management' version '1.1.5' // Zarządzanie zależnościami Spring
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_21
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web' // Dodane dla kontekstu webowego
    implementation 'org.liquibase:liquibase-core'
    implementation 'org.mapstruct:mapstruct:1.6.3'
    runtimeOnly 'com.h2database:h2'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    // Aby Lombok działał poprawnie również w testach (jeśli adnotacje są w kodzie testowym)
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
}

tasks.named('test') {
    useJUnitPlatform()
}

// Opcjonalnie: konfiguracja dla wtyczki bootJar, jeśli potrzebujesz dostosować
// springBoot {
//    mainClass = 'com.example.familytree.FamilyTreeApplication'
// }

// Opcjonalnie: jeśli chcesz mieć pewność, że Lombok jest odłączany od artefaktu (podobnie jak w Maven)
// tasks.withType(Jar) {
//    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
//    manifest {
//        attributes(
//                'Implementation-Title': project.name,
//                'Implementation-Version': project.version
//        )
//    }
// }
